# from tensorflow.python.keras import *
# import tensorflow as tf
import scipy.io as sio
import torch


def trans_Vrf(temp):
    v_real = torch.cos(temp)
    v_imag = torch.sin(temp)
    vrf = torch.complex(v_real, v_imag)
    return vrf


def Rate_func(h, v, SNR_input,Nt):
    # Ensure dtype is complex64
    h = h.to(torch.complex64)
    v = v.to(torch.complex64)
    
    # Batch dot product (manual implementation for complex values)
    hv = torch.sum(h * v, dim=1, keepdim=True)  # shape: [batch_size, 1]

    abs_hv_sq = torch.abs(hv) ** 2  # shape: [batch_size, 1]
    SNR_term = SNR_input / Nt * abs_hv_sq

    rate = torch.log2(1 + SNR_term)
    return -rate  # negative rate as loss

# load the saved .mat files generated by Matlab.
def mat_load(path):
    print('loading data...')
    # load the perfect csi
    h = sio.loadmat(path + '/pcsi.mat')['pcsi']
    # load the estimated csi
    h_est = sio.loadmat(path + '/ecsi.mat')['ecsi']
    print('loading complete')
    print('The shape of CSI is: ', h_est.shape)
    return h, h_est
